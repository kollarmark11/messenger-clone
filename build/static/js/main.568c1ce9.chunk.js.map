{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","align","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","src","width","FormControl","InputLabel","Input","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wVAyBeA,G,MArBCC,sBAAW,WAAwBC,GAAQ,IAA7BC,EAA4B,EAA5BA,QACpBC,EADgD,EAAnBC,WACPF,EAAQE,SAGpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAC3C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,sBAC5C,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACAC,MAAM,QACNC,MAAM,SACNC,QAAQ,YACRC,UAAU,OACJT,GAAD,UAAcD,EAAQE,UAAY,WAAlC,MALL,IAKwDF,EAAQA,gB,iBCDrEW,EAdKC,IAASC,cAAc,CACnCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAIAC,Y,iCCuERC,MA1Ef,WAAe,MAGaC,mBAAS,IAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAImBF,mBAAS,IAJ5B,mBAING,EAJM,KAIIC,EAJJ,OAKmBJ,mBAAS,IAL5B,mBAKNtB,EALM,KAKI2B,EALJ,KAoCb,OA7BAC,qBAAU,WAGRD,EAAYE,OAAO,6BAClB,IAEHD,qBAAU,WAKRnB,EAAGqB,WAAW,YAAYC,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAChEP,EAAYO,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIvC,QAASsC,EAAIE,iBAEjE,IAgBD,yBAAKrC,UAAU,OACb,yBAAKsC,IAAI,wDAAwDC,MAAM,QACrE,wBAAIvC,UAAU,eAAd,QAAkCD,EAAlC,uCAGF,0BAAMC,UAAU,aACd,kBAACwC,EAAA,EAAD,CAAaxC,UAAU,2BACrB,kBAACyC,EAAA,EAAD,2BACA,kBAACC,EAAA,EAAD,CAAO1C,UAAU,aAAa2C,MAAOrB,EAAOsB,SAAU,SAAAC,GAAK,OAAItB,EAASsB,EAAMC,OAAOH,UAGrF,kBAACI,EAAA,EAAD,CAAY/C,UAAU,kBAAkBgD,UAAW1B,EACjDhB,QAAQ,YACRF,MAAM,UACN6C,KAAK,SACLC,QA7BU,SAACL,GAEnBA,EAAMM,iBACN3C,EAAGqB,WAAW,YAAYuB,IAAI,CAC5BvD,QAASyB,EACTvB,SAAUA,EACVsD,UAAW5C,IAASU,UAAUmC,WAAWC,oBAG3C9B,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAACzB,SAAUA,EAAUF,QAASyB,MACxDC,EAAS,MAoBC,kBAAC,IAAD,SAQR,kBAAC,IAAD,CAAUvB,UAAU,iBAGlBwB,EAASU,KAAI,gBAAEE,EAAF,EAAEA,GAAIvC,EAAN,EAAMA,QAAN,OACX,kBAAC,EAAD,CAAS2D,IAAKpB,EAAIrC,SAAUA,EAAWF,QAASA,UChEtC4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7E,c","file":"static/js/main.568c1ce9.chunk.js","sourcesContent":["import React, { forwardRef } from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport './Message.css'\n\nconst Message = forwardRef(({ message, username }, ref) =>{\n    const isUser = username === message.username;\n\n\n    return (\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\n            <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\n                <CardContent>\n                    <Typography\n                    color=\"white\"\n                    align=\"center\"\n                    variant=\"subtitle1\"\n                    component=\"h3\">\n                        {!isUser && `${message.username || 'Anonymus'}: `} {message.message}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n    )\n})\n\nexport default Message\n","import firebase from \"firebase\"\n\nconst firebaseApp = firebase.initializeApp({\n        apiKey: \"AIzaSyD7SKOQR3fMivnOM2LyiAlsagLACmwfjb4\",\n        authDomain: \"messenger-clone-7f64f.firebaseapp.com\",\n        databaseURL: \"https://messenger-clone-7f64f.firebaseio.com\",\n        projectId: \"messenger-clone-7f64f\",\n        storageBucket: \"messenger-clone-7f64f.appspot.com\",\n        messagingSenderId: \"1007409554763\",\n        appId: \"1:1007409554763:web:95017229a5a3daf8f674ce\",\n        measurementId: \"G-8K8KLBVWPL\"\n      \n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, { useState, useEffect } from 'react';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport './App.css';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\n\nfunction App() {\n\n  //StateknÃ©l nem kell frissÃ­teni az oldalt, azÃ©rt jobb mint a vÃ¡ltozÃ³k\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('');\n\n  useEffect(() => {\n    //Run code here\n    // Ha a [] Ã¼res, akkor ez a kÃ³d amit itt Ã­runk EGYSZER fog lefutni amikor a komponens betÃ¶lt\n    setUsername(prompt('Please Enter Your Name')) \n  }, [] ) //Condition\n\n  useEffect(() =>{\n    //Egyszer fut le amikor a komponens betÃ¶lt\n    //onSnapshot -> ha akÃ¡rmilyen vÃ¡ltozÃ¡st talÃ¡l beledobja a snapshotba\n    // A doc a adatbazison belÃ¼li document-ek\n    //a map-al bejÃ¡rjuk Ã©s kiszedjÃ¼k a dokumentumokban lÃ©vÅ‘ adatokat\n    db.collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n    }); \n  }, [])\n\n  const sendMessage = (event) => {\n    //...messages -> tartsd meg az Ã¶sszes alap messaget, Ã©s tedd hozzÃ¡ pluszba az inputban lÃ©vÅ‘ket!!!\n    event.preventDefault();\n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    setMessages([...messages, {username: username, message: input}]);\n    setInput('');\n  }\n\n  return (\n    <div className=\"App\">\n      <img src=\"https://image.flaticon.com/icons/svg/2950/2950657.svg\" width=\"10%\" />\n        <h1 className=\"welcomeText\">Szia {username}!  Kezdj el chatelni. ğŸ¤™ </h1>\n      {/* Form Ãºjra tÃ¶lri az oldalt, ami nem jÃ³ nekÃ¼nk \n      event.preventDefault(); Ezzel mÅ±kÃ¶dik */}\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl center\">\n          <InputLabel>Enter a message...</InputLabel>\n          <Input className=\"app__input\" value={input} onChange={event => setInput(event.target.value)} />\n\n\n          <IconButton className=\"app__iconButton\" disabled={!input}  \n            variant=\"contained\" \n            color=\"primary\" \n            type='submit' \n            onClick={sendMessage}>\n              <SendIcon></SendIcon>\n          </IconButton>\n\n          {/* type=submit --> enterrel is megy */}\n        </FormControl>\n      </form>\n\n\n      <FlipMove className=\"messages__box\">\n      {\n        //BejÃ¡rja a messages tÃ¶mbÃ¶t, Ã©s minden egyes elemÃ©t kiÃ­rja!\n        messages.map(({id, message}) => (\n          <Message key={id} username={username}  message={message}/>\n        ))\n      }\n      </FlipMove>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}